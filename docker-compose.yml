version: '3.2'

services:
  db:
    # https://hub.docker.com/_/mysql
    container_name: db
    build:
      context: .
      dockerfile: ./db/Dockerfile
    environment:
      MYSQL_ROOT_PASSWORD: $DB_ROOT_PASSWORD
      # To create user use:
      # MYSQL_DATABASE: $DB_NAME
      # MYSQL_USER: $DB_USER
      # MYSQL_PASSWORD: $DB_USER_PASSWORD
    volumes:
      - $DB_PATH_DATA:/var/lib/mysql
      - $DB_PATH_LOG:/var/log/mysql
    networks:
      development:
        ipv4_address: $DB_IP_ADDRESS
    ports:
    - $DB_PORT:3306

  mssql:
    image: mcr.microsoft.com/mssql/server:2017-latest
    container_name: mssql
    environment:
      ACCEPT_EULA: 'Y'
      SA_PASSWORD: $DB_ROOT_PASSWORD
    networks:
      development:
        ipv4_address: 172.20.0.11
    ports:
    - 1433:1433

  cache:
    image: redis:alpine
    container_name: cache
    # Optional save data in host
    # volumes:
    # - $CACHE_PATH_DATA:/data
    ## Password redis-cli is: $CACHE_USER_PASSWORD
    ## Set password in redis-cli command exec: config set requirepass $CACHE_USER_PASSWORD
    networks:
      development:
        ipv4_address: $CACHE_IP_ADDRESS

  apache74:
    container_name: apache74
    build:
      context: .
      dockerfile: ./php74/Dockerfile
    volumes:
      - $WEB_DOCROOT:/var/www/html
    networks:
      development:
        ipv4_address: 172.20.0.74
    expose:
    - 80
    - 443
    extra_hosts:
      - "development.local:127.0.0.1"
      - "host.docker.internal:${HOST_DOCKER}"

  apache73:
    container_name: apache73
    build:
      context: .
      dockerfile: ./php73/Dockerfile
    volumes:
      - $WEB_DOCROOT:/var/www/html
    networks:
      development:
        ipv4_address: 172.20.0.73
    expose:
    - 80
    - 443
    extra_hosts:
      - "development.local:127.0.0.1"
      - "host.docker.internal:${HOST_DOCKER}"

  apache72:
    container_name: apache72
    build:
      context: .
      dockerfile: ./php72/Dockerfile
    volumes:
      - $WEB_DOCROOT:/var/www/html
    networks:
      development:
        ipv4_address: 172.20.0.72
    expose:
    - 80
    - 443
    extra_hosts:
      - "development.local:127.0.0.1"
      - "host.docker.internal:${HOST_DOCKER}"

  apache56:
    container_name: apache56
    build:
      context: .
      dockerfile: ./php56/Dockerfile
    volumes:
      - $WEB_DOCROOT:/var/www/html
    networks:
      development:
        ipv4_address: 172.20.0.56
    expose:
    - 80
    - 443
    extra_hosts:
      - "development.local:127.0.0.1"
      - "host.docker.internal:${HOST_DOCKER}"

  proxy:
    container_name: proxy
    build:
      context: .
      dockerfile: ./proxy/Dockerfile
    networks:
      development:
        ipv4_address: $PROXY_IP_ADDRESS
    ports:
    - '80:80'
    - '443:443'
    - '32700:32700'

  pentesting:
    container_name: pentesting
    build:
      context: .
      dockerfile: ./pentesting/Dockerfile
    volumes:
      - $WEB_DOCROOT:/var/www/html
    networks:
      development:
        ipv4_address: 172.20.0.99
    extra_hosts:
      - development.local:$PROXY_IP_ADDRESS

  zap:
    container_name: zap
    build:
      context: .
      dockerfile: ./zap/Dockerfile
    volumes:
      - $WEB_DOCROOT:/var/www/html
    networks:
      development:
        ipv4_address: 172.20.0.98
    ports:
    - '2375:2375'
    extra_hosts:
      - development.local:$PROXY_IP_ADDRESS

  ftp:
    image: atmoz/sftp:alpine
    container_name: ftp
    volumes:
      - $FTP_DOCROOT:/home/ftpusr/upload
    command: $FTP_USER:$FTP_PASSWORD:$FTP_UUID
    networks:
      development:
        ipv4_address: 172.20.0.97
    ports:
    - '8022:22'
    extra_hosts:
      - development.local:$PROXY_IP_ADDRESS

networks:
  development:
    external: true
