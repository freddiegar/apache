" VIM Config
" @see https://vim.fandom.com/wiki/Example_vimrc
" @see https://vim.fandom.com/wiki/Best_Vim_Tips
" @see https://www.shortcutfoo.com/blog/top-50-vim-configuration-options/
set nocompatible
set nomodeline
set secure
set hidden
set wildmenu
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,.git,.vscode,.idea
set hlsearch
set incsearch
set smartcase
set ignorecase
set gdefault
set lazyredraw
set nobackup
set nowritebackup

" Better Completion
" set complete-=i
" set complete=.,w,b,u,t
set completeopt=longest,menuone,preview

" Custom Interface
set title
set novisualbell
set autoread
set backspace=indent,eol,start
set clipboard=unnamedplus
set splitbelow
set splitright
set signcolumn=number
if has('mouse')
    set mouse=n
endif

" Custom Render
syntax enable
set nowrap
set display+=lastline
set encoding=utf-8
set linebreak
set scrolloff=1
set sidescrolloff=5

" Custom View
set number
set numberwidth=1
set showcmd
set ruler
set cursorline
set showmatch
set relativenumber
set list
set listchars=space:·,tab:»-
set noshowmode
set colorcolumn=120
set textwidth=120
set synmaxcol=800
set winheight=1
set winminheight=0
set winheight=999
set updatetime=300
set shortmess+=c

" Custom identation
set autoindent
set softtabstop=4
set shiftwidth=4
set expandtab
set fileformat=unix

" Enable folding : Hit za
set nofoldenable
set foldmethod=indent
set foldnestmax=10
set foldlevel=99

" Maps
let &t_TI = ""
let &t_TE = ""
let mapleader = "\<Space>"
let maplocalleader = "\<Space>"
map gd <C-}>
nnoremap Q @@
nnoremap X "_d
nnoremap Y y$
nnoremap <silent> ,<Space> :nohlsearch<Enter>
inoremap <silent> jj <Esc>:update<Enter>

" Tabs navigation
nnoremap <silent> ,x :ls<Enter>:buffer<Space>
nnoremap <silent> <Leader>j :if &modifiable && !&readonly && &modified <Enter> :write<Enter> :endif<Enter>:bprevious<Enter>
nnoremap <silent> <Leader>k :if &modifiable && !&readonly && &modified <Enter> :write<Enter> :endif<Enter>:bnext<Enter>

nnoremap <F12> :source ~/.vimrc<Enter>

nnoremap <leader>o :only<Enter>
nnoremap <leader>w :update<Enter>
nnoremap <leader>q :update<Enter>:bd<Enter>

" Better split switching
map <C-h> <C-W>h
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-l> <C-W>l

" Print full path
map <Leader>f :echo expand("%:p")<cr>

cabbrev vt :!clear && vendor/bin/phpunit --no-coverage --stop-on-failure
cabbrev vtf :!clear && vendor/bin/phpunit --no-coverage --stop-on-failure --filter <cword>
cabbrev ga :!clear && git status && git add .
cabbrev gd :!clear && git diff

if has('terminal')
    nnoremap <silent> <C-S-X> :term<Enter>
    tnoremap <Esc><Esc> <C-\><C-N>:bd!<Enter>

    " Mappings to move out from terminal to other views
    tnoremap <C-h> <C-w>h
    tnoremap <C-j> <C-w>j
    tnoremap <C-k> <C-w>k
    tnoremap <C-l> <C-w>l
endif

if !has('gui_running')
    set notimeout
    set ttimeout
    set ttimeoutlen=10
    augroup FastEscape
        autocmd!
        autocmd InsertEnter * set timeoutlen=0
        autocmd InsertLeave * set timeoutlen=1000
    augroup END
endif

" Plugins
call plug#begin('~/.vim/plugged')
Plug 'morhetz/gruvbox'
" Plug 'sainnhe/gruvbox-material'
Plug 'vim-airline/vim-airline'
Plug 'preservim/nerdtree'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'justinmk/vim-sneak'
Plug 'Raimondi/delimitMate'
Plug 'machakann/vim-swap'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'vim-syntastic/syntastic'
Plug 'StanAngeloff/php.vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'vim-test/vim-test'
Plug 'vim-scripts/autotags'
Plug 'arnaud-lb/vim-php-namespace'
Plug 'SirVer/ultisnips'
Plug 'sniphpets/sniphpets'
Plug 'vim-vdebug/vdebug'
Plug 'preservim/tagbar'
Plug 'phpactor/phpactor', {'for': 'php', 'branch': 'master', 'do': 'composer install --no-dev -o'}
Plug 'neoclide/coc.nvim', {'branch': 'release'} " After :CocInstall coc-phpls
" Plug 'editorconfig/editorconfig-vim'
" Plug 'pechorin/any-jump.vim'
call plug#end()

" Theme

if has('termguicolors')
    set termguicolors
endif

colorscheme gruvbox
let g:gruvbox_contrast_dark = 'hard'

" colorscheme gruvbox-material
" let g:gruvbox_material_background = 'hard'
" let g:gruvbox_material_enable_bold = 0
" let g:gruvbox_material_palette = 'original'

" Transparency
set background=dark
highlight Normal ctermbg=NONE
" highlight Normal guibg=NONE ctermbg=NONE

" Resize splits when the window is resized
autocmd VimResized * :wincmd =

" DelitMate
let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1
let g:delimitMate_smart_quotes = 1
let g:delimitMate_expand_inside_quotes = 0
let g:delimitMate_smart_matchpairs = '^\%(\w\|\$\)'
imap <expr> <Enter> pumvisible() ? "\<C-y>" : "<Plug>delimitMateCR"

" NerdTree
" @see https://github.com/preservim/nerdtree
" @see https://github.com/victormours/dotfiles/tree/master/vim
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let NERDTreeShowHidden = 1
let NERDTreeQuitOnOpen = 1
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeShowLineNumbers=1
let NERDTreeIgnore = ['*\.swp', '\.git', '\.vscode', '\.idea']
let g:plug_window = 'noautocmd vertical topleft new'
nnoremap <silent> <F2> :NERDTreeToggle<Enter>

" Snippets
let g:UltiSnipsEditSplit = 'vertical'
let g:UltiSnipsExpandTrigger='<Tab>'
let g:UltiSnipsJumpForwardTrigger = '<Tab>'
let g:UltiSnipsJumpBackwardTrigger='<S-Tab>'
let g:UltiSnipsUsePythonVersion = 3

" PHPVim
let g:php_version_id = 70400
autocmd FileType php set iskeyword+=$

" Vim Snake
let g:sneak#label = 1

" TagBar
" @see https://github.com/preservim/tagbar
nnoremap <silent> <F8> :TagbarToggle<Enter>

" Airline
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#tabline#buffer_nr_show=1

" Fzf
" @see https://github.com/junegunn/fzf.vim
" @see https://jdhao.github.io/2018/11/05/fzf_install_use/#installation
nnoremap <silent> <Leader>p :Files<Enter>

" Vim Tests
" https://github.com/vim-test/vim-test
let g:test#strategy = 'vimterminal'
let g:test#php#phpunit#options = '--testdox --no-coverage --stop-on-failure'
nnoremap <silent> <Leader>tt :TestNearest<Enter>
nnoremap <silent> <Leader>tf :TestFile<Enter>
nnoremap <silent> <Leader>ts :TestSuite<Enter>
nnoremap <silent> <Leader>tl :TestLast<Enter>
nnoremap <silent> <Leader>tg :TestVisit<Enter>

" Vim PHP Namespaces
let g:php_namespace_sort_after_insert = 1

function! IPhpInsertUse()
    call PhpInsertUse()
    call feedkeys('a',  'n')
endfunction
autocmd FileType php inoremap <Leader>uu <Esc>:call IPhpInsertUse()<Enter>
autocmd FileType php nnoremap <Leader>uu :call PhpInsertUse()<Enter>

function! PhpCSFixer()
    if bufname("%") == ''
        echohl WarningMsg
            echo 'Save file first!. Canceled.'
            echohl None
            return 0
    endif

    let configfile = !filereadable(expand('.php_cs')) ? '/var/www/html/freddiegar/services/.php_cs' : '.php_cs'

    silent write
    let result = system('php-cs-fixer fix ' . bufname("%") . ' --config="' . configfile .'"')
    silent :edit!
endfunction
autocmd FileType php nnoremap <silent> <F1> :call PhpCSFixer()<Enter>

" Vim Debug
let g:vdebug_keymap = {
\    "run" : "<F5>",
\    "step_over" : "<F8>",
\    "step_into" : "<F7>",
\    "step_out" : "<S-F8>",
\    "close" : "<S-F5>",
\    "detach" : "<F10>",
\    "set_breakpoint" : "<C-F8>",
\    "eval_visual" : "<Leader>xe"
\}
let g:vdebug_options = {
\    'port' : 9000,
\    'break_on_open' : 0,
\    'ide_key' : 'PHPSTORM'
\}

" COC Completion
" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-@> coc#refresh()
" Make <Enter> and <Leader><Tab> auto-select the first completion item
inoremap <silent><expr> <Enter> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<Enter>\<C-r>=coc#on_enter()\<Enter>"
inoremap <silent><expr> <Leader><Tab> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<Enter>\<C-r>=coc#on_enter()\<Enter>"

" https://vim.fandom.com/wiki/Faster_loading_of_large_files
" file is large from 2mb
let g:LargeFile = 1024 * 1024 * 2
augroup LargeFile 
  au!
  autocmd BufReadPre * let f=getfsize(expand("<afile>")) | if f > g:LargeFile || f == -2 | call LargeFile() | endif
augroup END

function! LargeFile()
    " No syntax highlighting
    set eventignore+=FileType
    setlocal bufhidden=unload
    setlocal buftype=nowrite
    setlocal undolevels=-1
    autocmd VimEnter *  echo "The file is larger than " . (g:LargeFile / 1024 / 1024) . " MB, so some options are changed."
endfunction

if filereadable(expand('~/.vimrc.local'))
  source ~/.vimrc.local
endif

